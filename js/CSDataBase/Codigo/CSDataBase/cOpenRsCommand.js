(function(globalObject) {
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3603
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------


    globalObject.CSDataBase = globalObject.CSDataBase || {}; //@@@: namespace CSDataBase
 //@@@: {


    globalObject.CSDataBase.createCOpenRsCommand = function() {

        const self = {}; //@@@: public class cOpenRsCommand
        const c_module = "cDataBase"; //@@@: private const string c_module = "cDataBase";

//         private delegate DbDataReader delegateAsyncOpenRsEx(string sqlstmt); //@@@: private delegate DbDataReader delegateAsyncOpenRsEx(string sqlstmt);

        let m_invoke = null; //@@@: private delegateAsyncOpenRsEx m_invoke = null;
        let m_ors = null; //@@@: private DbDataReader m_ors = null;
        let m_sqlstmt = ""; //@@@: private string m_sqlstmt = "";
        let m_done = false; //@@@: private bool m_done = false;

UNKNOWN >>         public bool done //@@@: public bool done
        { //@@@: {
UNKNOWN >>             get { return m_done; } //@@@: get { return m_done; }
        }; //@@@: }

UNKNOWN >>         public bool success //@@@: public bool success
        { //@@@: {
UNKNOWN >>             get { return m_ors !== null; } //@@@: get { return m_ors != null; }
        } //@@@: }

UNKNOWN >>         public DbDataReader ors //@@@: public DbDataReader ors
        { //@@@: {
UNKNOWN >>             get { return m_ors; } //@@@: get { return m_ors; }
        } //@@@: }

        self.getExecuteCommand = function(db, sqlstmt) { //@@@: public void getExecuteCommand(cDataBase db, string sqlstmt)
            m_sqlstmt = sqlstmt; //@@@: m_sqlstmt = sqlstmt;
            m_invoke = new delegateAsyncOpenRsEx(db.asyncOpenRsEx); //@@@: m_invoke = new delegateAsyncOpenRsEx(db.asyncOpenRsEx);
        }; //@@@: }

        self.execute = function() { //@@@: public void execute()
            try { //@@@: try
                m_invoke.BeginInvoke(m_sqlstmt, this.callBack, null); //@@@: m_invoke.BeginInvoke(m_sqlstmt, this.callBack, null);
            } //@@@: }
            catch (ex) { //@@@: catch (Exception ex)
                cError.mngError(ex, "execute", c_module, ""); //@@@: cError.mngError(ex, "execute", c_module, "");
            } //@@@: }
        }; //@@@: }

        const callBack = function(ar) { //@@@: private void callBack(IAsyncResult ar)
            try { //@@@: try
                m_ors = m_invoke.EndInvoke(ar); //@@@: m_ors = m_invoke.EndInvoke(ar);
                m_done = true; //@@@: m_done = true;
            } //@@@: }
            catch (ex) { //@@@: catch (Exception ex)
                cError.mngError(ex, "callBack", c_module, ""); //@@@: cError.mngError(ex, "callBack", c_module, "");
            } //@@@: }
        }; //@@@: }

        const cOpenRsCommand = function() { //@@@: public cOpenRsCommand()
        }; //@@@: }
        return self;

    } //@@@: }
}(globalObject)); //@@@: }
